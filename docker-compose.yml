version: '3.8'

services:
  # Gateway Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # gRPC port
      - "8081:8081"  # HTTP port
      - "9090:9090"  # Metrics port
    environment:
      - GRPC_PORT=8080
      - HTTP_PORT=8081
      - LOG_LEVEL=info
      - QUEUE_WORKERS=5
      - DATABASE_URL=postgres://worker:worker_pass@postgres:5432/worker_db?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - worker_data:/var/lib/worker
    depends_on:
      - postgres
      - redis
    networks:
      - worker_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=worker_db
      - POSTGRES_USER=worker
      - POSTGRES_PASSWORD=worker_pass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - worker_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U worker -d worker_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    networks:
      - worker_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - worker_network
    restart: unless-stopped

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - worker_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - worker_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  worker_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  worker_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16